1+1
AirfareReport <- read.csv("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollectionAssignment2/Domestic_Airfare_2016_Q1")
install.packages("xlsx")
library(xlsx)
AirfareReport <- read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1",header=TRUE)
AirfareReport <- read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1",sheetIndex = 1,header=TRUE)
AirfareReport <- read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1.xlsx",sheetIndex = 1,header=TRUE)
AirfareReport
summary(AirfareReport)
hist(fare)
hist(AirfareReport$fare)
install.packages('xlsx')
library(xlsx)
ds.profile<-read.xlsx("/Users/homanaren/Documents/data-science-profile.xlsx",
sheetIndex=1, header=TRUE)
ds.profile
summary(ds.profile)
str(ds.profile)
save(ds.profile, file = "data-science-profile.rda")
ls()
rm(ds.profile)
ls()
load("data-science-profile.rda")
ls()
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
AirfareReport<-read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1.xlsx",sheetIndex = 1,header=TRUE)
AirfareReport
summary(AirfareReport)
save(AirfareReport, file = "Airfare_report.rda")
attach(AirfareReport)
hist(fare)
hist(fare_low)
hist(airport_1)
detach(AirfareReport)
install.packages("psych")
library(psych)
multi.hist(AirfareReport[2:5])
multi.hist(AirfareReport[2:3])
multi.hist(AirfareReport[6,8])
multi.hist(AirfareReport[6:8])
multi.hist(AirfareReport[5:7])
multi.hist(AirfareReport[7])
multi.hist(AirfareReport[6])
multi.hist(AirfareReport[6:7])
hist(fare_low)
attach(AirfareReport)
hist(fare)
hist(fare_low)
hist(fare_lg)
hist(fare_low)
detach(AirfareReport)
install.packages("psych")
install.packages("psych")
library(psych)
multi.hist(AirfareReport[6:7])
multi.hist(AirfareReport[6:8])
boxplot(fare)
attach(AirfareReport)
boxplot(fare)
boxplot(fare_lg)
boxplot(fare_low)
pairs(AirfareReport[6:8])
AirfareReport<-read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1.xlsx",sheetIndex = 1,header=TRUE)
AirfareReport
summary(AirfareReport)
save(AirfareReport, file = "Airfare_report.rda")
install.packages("psych")
install.packages("psych")
library(psych)
multi.hist(AirfareReport[6:8])
attach(AirfareReport)
hist(fare)
hist(fare_lg)
hist(fare_low)
boxplot(fare)
boxplot(fare_lg)
boxplot(fare_low)
detach(AirfareReport)
pairs(AirfareReport[6:8])
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
AirfareReport<-read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1.xlsx",sheetIndex = 1,header=TRUE)
AirfareReport
summary(AirfareReport)
plot(airport_1,fare)
attach(AirfareReport)
plot(airport_1,fare)
ChicagoData = AirfareReport[airport_1=='Chicago, IL']
ChicagoData
install.packages("xlsx")
library(xlsx)
AirfareReport<-read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1.xlsx",sheetIndex = 1,header=TRUE)
AirfareReport
summary(AirfareReport)
attach(AirfareReport)
ChicagoData = AirfareReport[airport_1=='MDW']
ChicagoData = AirfareReport[AirfareReport$airport_1=='MDW']
detach(AirfareReport)
ChicagoData = AirfareReport[AirfareReport$airport_1=='MDW']
ChicagoData = AirfareReport[AirfareReport$airport_1=='MDW',]
ChicagoData
hist(fare)
hist(ChicagoData$fare)
with(ChicagoData,airport_2[fare=min(fare)])
with(ChicagoData,airport_2[fare==min(fare)])
ChicagoData[ChicagoData$airport_2==ChicagoData$airport_2[ChicagoData$fare==min(ChicagoData$fare)],]
barplot(ChicagoData$airport_2,main="Browser Usage (August 2013)", ylim=c(0,max(ChicagoData$fare)))
barplot(ChicagoData$airport_2,main="Browser Usage (August 2013)", ylim=c(0,500))
barplot(ChicagoData$airport_2,main="Browser Usage (August 2013)", ylim=c(0,50))
AirfareReport_1<-read.xlsx("/Users/homanaren/Documents/CS504-DATA_SCIENCE/Assignments/DataCollection_Assignment2/Domestic_Airfare_2016_Q1.xlsx",sheetIndex = 2,header=TRUE)
AirfareReport_1
library(lattice)
attach(AirfareReport_1)
barchart(fare~airport_2,data = AirfareReport_1,groups=Quarter)
detach(AirfareReport_1)
shiny::runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
runApp('Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor')
install.packages("maps")
library(maps)
map("state", interior = TRUE)
map("state", fill= TRUE, col="light green", add = TRUE)
map("state", interior = TRUE,fill= TRUE, col="light green")
library(maps)
map("world")
map("state", interior = TRUE,fill= TRUE, col="light green")
setwd("/Users/homanaren/Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor")
airportMap <- read.csv("AirportCodes.csv",header = TRUE, sep = ",")
airportMap
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggmap)
install.packages("ggmap")
library(ggmap)
airportMap1 <- head(airportMap)
ggmap(getMap)+geom_point(data = airportMap1, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
getMap
ggmap(getMap) +
geom_point(data = airportMap1, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 4,maptype = "satellite", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
library(ggmap)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 4,maptype = "satellite", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 4,maptype = "satellite", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
install.packages("maps")
install.packages("maps")
library(maps)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggmap", type = "source")
library(ggmap)
setwd("/Users/homanaren/Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor")
airportMap <- read.csv("AirportCodes.csv",header = TRUE, sep = ",")
airportMap1 <- head(airportMap)
ggmap(getMap) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 4,maptype = "terrain", scale = 2)
ggmap(getMap) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
getMap1 <- get_map(location = c(lon = mean(airportMap$longitude), lat = mean(airportMap$latitude)), zoom = 2,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
getMap1 <- get_map(location = c(lon = mean(airportMap$longitude), lat = mean(airportMap$latitude)), zoom = 2,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap, aes(x = airportMap$longitude, y = airportMap$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 2,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap, aes(x = airportMap$longitude, y = airportMap$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 2,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggmap", type = "source")
library(ggmap)
setwd("/Users/homanaren/Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor")
airportMap <- read.csv("AirportCodes.csv",header = TRUE, sep = ",")
airportMap1 <- head(airportMap)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 2,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 3, shape = 21)
getMap1 <- get_map(location = c(lon = mean(airportMap1$longitude), lat = mean(airportMap1$latitude)), zoom = 4,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
ggmap(UScitiesD) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
install.packages("maps")
install.packages("maps")
library(maps)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red")
lines(x = airportMap1$longitude, y = airportMap1$latitude, col = "blue")
ggmap(getMap1) +
geom_point(data = airportMap1, aes(x = airportMap1$longitude, y = airportMap1$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red",size = 2)
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19)
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19, cex = 1.5)
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19, cex = 1.0)
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19)
lines(x = airportMap1$longitude, y = airportMap1$latitude, col = "blue")
airportMap1
text(airportMap1$longitude,airportMap1$latitude,airportMap1$airport,cex=1,adj=0,pos=2,col="#C2C2C2")
text(airportMap1$longitude,airportMap1$latitude,airportMap1$airport,cex=1,adj=0,pos=2,col="yellow")
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
points(x = airportMap1$longitude, y = airportMap1$latitude, col = "red", pch = 19)
airportMap1
text(airportMap1$longitude,airportMap1$latitude,airportMap1$airport,cex=1,adj=0,pos=2,col="yellow")
airfare <- read.csv("AirFare_2011_2016.csv", header = TRUE, sep = ",")
names(airportMap1)
names(airfare)
nrow(airfare)
airfare1 <- head(airfare)
airfare1
install.packages("network")
library(network)
library("network")
coocNet<-network(airfare1,
matrix.type='edgelist',
directed=FALSE  # this will be an undirected network
#ignore.eval=FALSE,  # confusingly, this tells it to include edge weights
#names.eval='Tot_cooc'  # names for the edge weights
)
coocNet
coocNet<-network(airfare1,
matrix.type='edgelist',
directed=FALSE  # this will be an undirected network
#ignore.eval=FALSE,  # confusingly, this tells it to include edge weights
#names.eval='Tot_cooc'  # names for the edge weights
)
coocNet
coocNet%v%'lon'<-sapply(network.vertex.names(coocNet),function(name){
airfare1[airfare1$airport_1==name,]$lon
})
coocNet%v%'lat'<-sapply(network.vertex.names(coocNet),function(name){
rawnodes[rawnodes$ID==name,]$lat
})
coocNet<-network(airfare1,
matrix.type='edgelist',
directed=FALSE  # this will be an undirected network
#ignore.eval=FALSE,  # confusingly, this tells it to include edge weights
#names.eval='Tot_cooc'  # names for the edge weights
)
coocNet
coocNet%v%'lon'<-sapply(network.vertex.names(coocNet),function(name){
airfare1[airfare1$airport_1==name,]$lon
})
coocNet%v%'lat'<-sapply(network.vertex.names(coocNet),function(name){
airfare1[airfare1$airport_1==name,]$lat
})
coocNet
plot.network(coocNet,  # pass in the network
# don't erase the map before drawing the network
new=FALSE,
# get coordiantes from vertices and pass in as 2-col matrix
coord=cbind(coocNet%v%'lon',coocNet%v%'lat'),
# ---- all the rest of these are optional to make it look nice ------
# set a semi-transparent edge color
edge.col='#AA555555',
# specifiy an edge width scaled as fraction of total co-occurence
# set the vertex size
vertex.cex=0.5,
# set a semi transparent vertex color
vertex.col='#AA555555',
vertex.border='white',
# please don't jitter the points around
jitter=FALSE)
shiny::runApp()
runApp('~/Documents')
runApp()
setwd("/Users/homanaren/Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor")
data_sets =  read.csv("AirportCodes.csv",header = TRUE,sep=",")
airfare =  read.csv("Airfare_2011_2016.csv", header = TRUE, sep = ",")
data_sets
airfare
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- read.csv("Airfare_2011_2016.csv", header = TRUE, sep = ",")
attach(test)
barchart(fare~Year,xlab="Cities gropued by quarter",ylab= "Fare",data = test,groups=quarter, auto.key = TRUE, main = "Comparison of fare from Albany City for different quarters")
test1 = test[test$airport_1 == 'ABQ' & test$airport_2 == 'DFW',]
attach(test1)
barchart(fare~Year,xlab="Cities gropued by quarter",ylab= "Fare",data = test1,groups=quarter, auto.key = TRUE, main = "Comparison of fare from Albany City for different quarters")
runApp()
runApp()
install.packages("maps")
install.packages("maps")
)
library(maps)
getMap <- map("state", interior = TRUE,fill= TRUE, col="light green")
getMap
setwd("/Users/homanaren/Documents/UI/Spring2017/CS504-DATA_SCIENCE/FinalProject/FarePredictor")
airportMap <- read.csv("AirportCodes.csv",header = TRUE, sep = ",")
airportMap1 <- head(airportMap)
airfare <- read.csv("AirFare_2011_2016.csv", header = TRUE, sep = ",")
points(x = airportMap$longitude, y = airportMap$latitude, col = "red", pch = 19)
airportMap1
text(airportMap$longitude,airportMap$latitude,airportMap$airport,cex=1,adj=0,pos=2,col="yellow")
lines(x = airportMap$longitude, y = airportMap$latitude, col = "blue")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggmap", type = "source")
library(ggmap)
getMap1 <- get_map(location = c(lon = mean(airportMap$longitude), lat = mean(airportMap$latitude)), zoom = 4,maptype = "terrain", scale = 2)
ggmap(getMap1) +
geom_point(data = airportMap, aes(x = airportMap$longitude, y = airportMap$latitude, fill = "red", alpha = 0.8), size = 5, shape = 21)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(lattice)
library(ggplot2)
shinyUI(pageWithSidebar(
headerPanel("Fare Predictor"),
sidebarPanel(
fileInput('file1','choose CSV file',accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
uiOutput("choose_from"),
uiOutput("choose_to")
),
mainPanel(
plotOutput("result")
#textOutput("result1")
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
